[mode]
# Possible models: [bert-ner, bert-ner-re, ]
model_name = bert-ner-re
# If True, model is compressed and saved in output_folder at the end of training. Model weights are
# taken from the last epoch.
save_model = False

[data]
# You can specify multiple datasets by listing their paths, separated by a comma.
dataset_folder = ./datasets/NCBI_Disease_BIO
# Use 'CoNLL2003DatasetReader' for NER datasets or 'CoNLL2004DatasetReader' for RE datasets
dataset_reader = CoNLL2004DatasetReader
output_folder = ./output
# Path to pre-trained model. To train a model from scratch, leave this blank.
pretrained_model =

[model]
word_embed_dim = 200
char_embed_dim = 30

[training]
# Values chosen for each hyperparameter represent sensible defaults that perform well across a wide
# range of NLP tasks (POS tagging, Chunking, NER, etc.) and thus should only be changed in special
# circumstances.
optimizer = nadam
activation = relu
# Set to 0 to turn off gradient normalization.
grad_norm = 1.0
# For certain optimizers, these values are ignored. See compile_model() in
# saber/utils/model_utils.py.
learning_rate = 0.00002
weight_decay = 0.1

# Three dropout values must be specified (separated by a comma), corresponding to the dropout rate
# to apply to the input, output and recurrent connections respectively. Must be a value between 0.0
# and 1.0.
dropout_rate = 0.1

batch_size = 16

# Fraction of the training data to be used as validation data. If a validation partition is 
# already provided at 'dataset_folder/valid.*' then this is ignored. 
validation_split = 0.10
# Number of folds to use in a k-fold cross-validation. If validation_split > 0 or a validation
# partition is already provided at 'dataset_folder/valid.*' then this is ignored.
k_folds = 10
epochs = 10

# Matching criteria used when determining whether or not a prediction is a true-positive. Choices
# are 'left' for left-boundary matching, 'right' for right-boundary matching and 'exact' for
# exact-boundary matching.
criteria = exact

[advanced]
verbose = False
debug = False
# If True, per-epoch logs which can be visualized with TensorBoard are written to output_folder
# Note: These logs can be quite large.
tensorboard = False
# If True, then during training the models weights for each and every epoch will be saved.
# Otherwise, weights are only saved for epochs that achieve a new best on validation loss.
save_all_weights = False
# If True, tokens that occur less than 1 time in the training dataset (hapax legomenon) are replaced
# with a special unknown token.
replace_rare_tokens = True
# TEMP. Set to true if variational dropout should be used.
variational_dropout = False
